Moteur du jeu ->
Pour des raisons de performance et de simplicité le moteur devra utiliser du GPU instancing pour
rendre les cubes.
Plusieur possibilités pour la manière de rendre les cubes (il faudra en choisir une) : 
- Créer 6 buffer, chaque buffer stockera une face
- Créer un seul buffer qui contiendra des cubes, c'est la solution la plus simple mais la moins 
  performantes car la carte graphique calculera des faces qui ne sont pas visibles
- Créer un buffer qui contient toutes les faces séparément, cependant cela empêche (?) de faire du GPU
  instancing mais règle le problème de face hors champ de vision
- Créer un seul buffer qui contient une seule face et appliquer une matice de rotation à cette face <-


Chunk -> représente un chunk et s'occupe de la génération de celui ci
ChunkCluster -> représente les chunks chargés autour du joueur (vector<Chunk>)
ChunkRenderer -> prend un chunkCluster et un joueur et dessine les chunks à l'écran
		 Cette classe doit determiner dans la liste de cubes des chunks quelles faces de quelles cubes
		 sont visibles 

VBO -> postion(vec3), normal(vec3), offset(vec3), texture(16 derniers bits) face(16 premiers bits)(int) = 44 octets par face

------------------------------------------------------------------------------------------------------

Le joueur doit pourvoir se déplacer dans un monde infini généré procéduralement ->
Le programme adoptera un système de chunk comme minecraft, ils sont générés autour du joueur dans 
un rayon donné. 
Pour ce faire on utilisera du perlin noise (ou simplex) via une bibliothèque externe.
Les chunks déjà générés et/ou modifié seront stockés dans un vector au cour de l'execution.

Règles de génération d'un chunk :
- Le chunk doit faire 16 par 16 blocs de large et 256 blocs de hauteur
- La surface se trouvera entre la couche 128 et 196 et se composera de terre
- Une couche de pierre se trouvera entre 0 et 128 blocs de hauteur (2eme image de bruit)

Plusieurs chunk doivent pouvoir être générés en parallèle

------------------------------------------------------------------------------------------------------

Le joueur doit pouvoir casser et placer des blocs -> à spécifier

------------------------------------------------------------------------------------------------------

Le joueur doit subir la gravité et/ou voler -> physique à spécifier
Le joueur ne doit pas pouvoir traverser les blocs -> physique à spécifier

------------------------------------------------------------------------------------------------------

Le monde doit contenir plusieurs environnements différents -> On utilisera 2 image en 2D de bruit une
représente l'humidité et l'autre la température les règles sont qui détermine le bloc sont encore a
déterminer en fonction des résultats (voir https://www.youtube.com/watch?v=ob3VwY4JyzE)

------------------------------------------------------------------------------------------------------
